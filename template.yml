AWSTemplateFormatVersion: '2010-09-09'

Metadata:
  RepoUrl: https://bitbucket.airnz.co.nz/projects/EMT/repos/navx
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Miner Configuration
        Parameters:
        - EthWallet

      - Label:
          default: Instance Configuration
        Parameters:
        - InstanceType
        - InstanceAmi
        - SshKeyName

      - Label:
          default: Networking Configuration
        Parameters:
        - VpcId
        - SubnetIds
        - AccessCidr

Parameters:
  InstanceType:
    Type: String
    AllowedValues:
    #- g3s.xlarge    # 1 GPU Tesla M60
    #- g3.8xlarge    # 2 GPU Tesla M60
    - g4dn.xlarge   # 1 GPU Tesla T4 -- best value (cost/performance)
    - g4dn.12xlarge # 4 GPU Tesla T4
    #- p2.xlarge     # 1 GPU Tesla K80
    #- p2.8xlarge    # 8 GPU Tesla K80
    #- p2.16xlarge   # 16 GPU Tesla K80
    - p3.2xlarge    # 1 GPU Tesla V100
    - p3.8xlarge    # 4 GPU Tesla V100
    #- p3.16xlarge   # 8 GPU Tesla V100
    Default: g4dn.xlarge

  InstanceCount:
    Type: Number
    Default: 1
    MaxValue: 5

  SshKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: aws-sandpit

  InstanceAmi:
    Type: AWS::EC2::Image::Id
    Description: Deep Learning AMI (Ubuntu 18.04) in the current region
    Default: ami-0bc87a16c757a7f07   # Deep Learning AMI (Ubuntu 18.04) Version 36.0 (us-west-2)

  EthWallet:
    Type: String
    Description: Ethereum Wallet Address
    Default: "0x99b36B44cf319c9E0ed4619ee2050B21ECac2c15"
    AllowedPattern: "0x[0-9a-fA-F]+"

  VpcId:
    Description: The VPC where this stack will be deployed
    Type: AWS::EC2::VPC::Id
    Default: vpc-091cd571

  SubnetIds:
    Description: The subnet where this instance will be deployed
    Type: List<AWS::EC2::Subnet::Id>
    Default: subnet-620d3838,subnet-2e2b7157,subnet-2eefab65

  AccessCidr:
    Type: String
    Default: 210.54.38.87/32

Resources:

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-instance-role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref InstanceRole

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        InstanceType: !Ref InstanceType
        ImageId: !Ref InstanceAmi
        KeyName: !Ref SshKeyName
        SecurityGroupIds:
        - !Ref SecurityGroup
        UserData:
          'Fn::Base64':
            'Fn::Sub': |
                #!/bin/bash -x
                cd /tmp
                INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                wget -O ethminer.tar.gz https://github.com/ethereum-mining/ethminer/releases/download/v0.18.0/ethminer-0.18.0-cuda-9-linux-x86_64.tar.gz
                tar xvfz ethminer.tar.gz
                cd bin
                cat > runner.sh << __EOF__
                #!/bin/bash -x
                SERVERS=(us1 us2 eu1 asia1)
                while (true); do
                  PREFERRED_SERVER=\${!SERVERS[\${!RANDOM} % \${!#SERVERS[@]}]}
                  ./ethminer \
                    -P stratums://${EthWallet}.${!INSTANCE_ID}@\${!PREFERRED_SERVER}.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${!INSTANCE_ID}@us1.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${!INSTANCE_ID}@us2.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${!INSTANCE_ID}@eu1.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${!INSTANCE_ID}@asia1.ethermine.org:5555 \
                  >> /tmp/ethminer.log 2>&1
                done
                __EOF__
                chmod +x runner.sh
                nohup ./runner.sh &

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref AWS::StackName
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref AccessCidr
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  SpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: diversified # capacityOptimized
        IamFleetRole: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/spotfleet.amazonaws.com/AWSServiceRoleForEC2SpotFleet"
        LaunchTemplateConfigs:
        - LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Overrides:
          - SubnetId: !Select [ 0, !Ref SubnetIds ]
          - SubnetId: !Select [ 1, !Ref SubnetIds ]
          - SubnetId: !Select [ 2, !Ref SubnetIds ]
        TargetCapacity: !Ref InstanceCount
        Type: maintain

  NotificationTopic:
    Type: AWS::SNS::Topic

Outputs:
  #InstanceIp:
  #  Description: Instance IP address
  #  Value: !GetAtt Instance.PublicIp

  NotificationTopic:
    Description: Monitoring notification topic
    Value: !Ref NotificationTopic
